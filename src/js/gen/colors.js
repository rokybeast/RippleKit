import fs from "node:fs";
import tinycolor from "tinycolor2";
import config from "../../ripple.config.js";

export default function () {
    const basePalette = config.palette;
    const themeColors = config.theme.colors;

    const shades = [
        { name: 50, lighten: 45 },
        { name: 100, lighten: 40 },
        { name: 200, lighten: 30 },
        { name: 300, lighten: 20 },
        { name: 400, lighten: 10 },
        { name: 500, lighten: 0 },
        { name: 600, darken: 10 },
        { name: 700, darken: 20 },
        { name: 800, darken: 30 },
        { name: 900, darken: 40 },
    ];

    let output = "// Auto-generated by RippleKit\n\n";

    // Master Palatte
    for (const [name, baseHex] of Object.entries(basePalette)) {
        if (name === "white" || name === "black") {
            output += `$${name}: ${baseHex};\n\n`;
        } else {
            shades.forEach((shade) => {
                let color = tinycolor(baseHex);
                if (shade.lighten !== undefined) {
                    color = color.lighten(shade.lighten);
                } else if (shade.darken !== undefined) {
                    color = color.darken(shade.darken);
                }

                const final = color.toHexString().toLowerCase();
                const original = tinycolor(baseHex).toHexString().toLowerCase();

                if (final === original && shade.name !== 500) {
                    return; // skip duplicate shades
                }

                output += `$${name}-${shade.name}: ${final};\n`;
            });
            output += "\n";
        }
    }

    // Only single shade for semantic colors
    for (const [semantic, base] of Object.entries(themeColors)) {
        if (!basePalette[base]) {
            console.warn(`⚠ No base color found for ${semantic} (${base})`);
            continue;
        }

        if (base === "white" || base === "black") {
            output += `$${semantic}: $${base};\n`;
        } else {
            output += `$${semantic}: $${base}-500;\n`;
        }
    }

    fs.writeFileSync("src/scss/lib/variables/_colors.scss", output);
    console.log("✔ RippleKit color map generated → _colors.scss");
}
