import fs from "node:fs";
import tinycolor from "tinycolor2";
import config from "../../ripple.config.js";

export default function () {
    const basePalette = config.palette;
    const themeColors = config.theme.colors;

    const output = [];

    const shades = [
        { name: 50, lighten: 45 },
        { name: 100, lighten: 40 },
        { name: 200, lighten: 30 },
        { name: 300, lighten: 20 },
        { name: 400, lighten: 10 },
        { name: 500, lighten: 0 },
        { name: 600, darken: 10 },
        { name: 700, darken: 20 },
        { name: 800, darken: 30 },
        { name: 900, darken: 40 },
    ];

    output.push("// Auto-generated by RippleKit\\n");

    // Master Palette
    for (const [name, baseHex] of Object.entries(basePalette)) {
        shades.forEach((shade) => {
            let color = tinycolor(baseHex);
            if (shade.lighten !== undefined) {
                color = color.lighten(shade.lighten);
            } else if (shade.darken !== undefined) {
                color = color.darken(shade.darken);
            }
            output.push(`$${name}-${shade.name}: ${color.toHexString()};`);
        });
        output.push("");
    }

    // Semantic Colors
    for (const [semantic, base] of Object.entries(themeColors)) {
        if (!basePalette[base]) {
            console.warn(`⚠ No base color found for ${semantic} (${base})`);
            continue;
        }
        shades.forEach((shade) => {
            output.push(`$${semantic}-${shade.name}: $${base}-${shade.name};`);
        });
        output.push("");
    }

    fs.writeFileSync("src/scss/lib/variables/_colors.scss", output.join("\\n"));
    console.log("✔ Dynamic palette generated → _colors.scss");
}
